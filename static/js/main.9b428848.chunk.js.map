{"version":3,"sources":["Setminmax.module.css","MainButton.module.css","RC.module.css","MainButton.jsx","RC.jsx","Display.jsx","Setmin.jsx","Setmax.jsx","redux/reducer.js","App.js","serviceWorker.js","redux/store.js","index.js","Display.module.css"],"names":["module","exports","MainButton","props","className","classNameButton","onClick","disabled","title","RC","s","rc","inc","countplus","blockinc","reset","countreset","blockres","showSettings","Display","classForDisplay","count","maxVal","redDisplay","display","disabledSetStatus","displayWhileSet","Setmin","classForMinMaxValues","minError","displayMinRed","displayMinBlack","setmin","minButtons","setButtons","id","disabledAddMin","disabledReduceMin","minVal","Setmax","setmax","maxButtons","maxval","initialState","setButtonDisabled","newDisable","disabledReduceMax","setVis","reducer","state","action","type","maxValue","error","disablesAddMin","minValue","App","saveState","stateAsString","JSON","stringify","localStorage","setItem","restoreState","getItem","stateAsObject","parse","setState","hardMinValue","hardMaxValue","countPlus","countReset","setClickDisabled","render","setMinButton","setMaxButton","mainButton","disableSetButton","addCounter","resetCounter","showSet","this","React","Component","ConnectedApp","connect","dispatch","setMaxButtonAC","setMinButtonAC","Boolean","window","location","hostname","match","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b428848.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"setmax\":\"Setminmax_setmax__1hAy6\",\"setmin\":\"Setminmax_setmin__AwS0F\",\"setButtons\":\"Setminmax_setButtons__eEyYB\",\"maxButtons\":\"Setminmax_maxButtons__3yjuV\",\"minButtons\":\"Setminmax_minButtons__2dH0m\",\"displayMinRed\":\"Setminmax_displayMinRed__tMb3h\",\"displayMinBlack\":\"Setminmax_displayMinBlack__1lkEG\",\"displayMinMax\":\"Setminmax_displayMinMax__1-ya1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainButton\":\"MainButton_mainButton__1-aQ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rc\":\"RC_rc__1_zqF\",\"inc\":\"RC_inc__2_W8I\",\"reset\":\"RC_reset__10smN\"};","import React from 'react';\r\n\r\nconst MainButton = (props) => {\r\n\r\n        return <div className='inc-container'>\r\n            <button className={props.classNameButton}\r\n                    onClick={props.onClick}\r\n                    disabled={props.disabled}>\r\n                {props.title}\r\n            </button>\r\n        </div>;\r\n\r\n};\r\n\r\nexport default MainButton;","import React from 'react';\r\nimport s from \"./RC.module.css\";\r\nimport MainButton from \"./MainButton\";\r\n\r\nconst RC = (props) => {\r\n\r\n    return (\r\n        <div className={s.rc}>\r\n            <MainButton title=\"INC\"\r\n                        classNameButton={s.inc}\r\n                        onClick={props.countplus}\r\n                        disabled={props.blockinc}\r\n            />\r\n            <MainButton title=\"RESET\"\r\n                        classNameButton={s.reset}\r\n                        onClick={props.countreset}\r\n                        disabled={props.blockres}\r\n            />\r\n            <MainButton title=\"SET\"\r\n                        classNameButton={s.reset}\r\n                        onClick={props.showSettings}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RC;","import React from 'react';\r\nimport s from './Display.module.css';\r\n\r\n\r\n\r\nconst Display = (props) => {\r\n    let classForDisplay = (props.count === props.maxVal) ? s.redDisplay : s.display;\r\n    return(\r\n        <div className={classForDisplay}>\r\n            {props.disabledSetStatus ? props.count : props.displayWhileSet}\r\n    </div>\r\n    )\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\nimport s from \"./Setminmax.module.css\";\r\n\r\nconst Setmin = (props) => {\r\n\r\n    let classForMinMaxValues = (props.minError) ?\r\n        s.displayMinRed : s.displayMinBlack;\r\n\r\ndebugger\r\n    return (\r\n        <div className={s.setmin}>\r\n            <div className={s.minButtons}>\r\n                <h2>Set min</h2>\r\n                <span>\r\n                    <button className={s.setButtons}\r\n                            id='addMin'\r\n                            onClick={() => props.setmin('addMin')}\r\n                            disabled={props.disabledAddMin}\r\n                    >+</button>\r\n\r\n                    <button className={s.setButtons}\r\n                            id='reduceMin'\r\n                            onClick={() => props.setmin('reduceMin')}\r\n                            disabled={props.disabledReduceMin}\r\n                    >-</button>\r\n\r\n                </span>\r\n            </div>\r\n            <div><p className={classForMinMaxValues}>{props.minVal}</p></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setmin;","import React from 'react';\r\nimport s from \"./Setminmax.module.css\";\r\n\r\nconst Setmax = (props) => {\r\n\r\n    let classForMinMaxValues = (props.minError) ?\r\n        s.displayMinRed : s.displayMinBlack;\r\n\r\n    return (\r\n        <div className={s.setmax}>\r\n            <div className={s.maxButtons}>\r\n                <h2>Set max</h2>\r\n                <span>\r\n                <button className={s.setButtons} id='addMax'\r\n                        onClick={() => props.setmax('addMax')}\r\n                        disabled={props.disabled}\r\n                >+</button>\r\n                <button className={s.setButtons} id='reduceMax'\r\n                        onClick={() => props.setmax('reduceMax')}\r\n                        disabled={props.disabled}\r\n                >-</button>\r\n                </span>\r\n            </div>\r\n            <div><p className={classForMinMaxValues}>{props.maxval}</p></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setmax;","export const ADD_COUNTER = 'ADD_COUNTER';\r\nexport const RESET_COUNTER = 'RESET_COUNTER';\r\nexport const SHOW_SET = 'SHOW_SET';\r\nexport const DISABLE_SET_BUTTON = 'DISABLE_SET_BUTTON';\r\nexport const SET_MAX_BUTTON = 'SET_MAX_BUTTON';\r\nexport const SET_MIN_BUTTON = 'SET_MIN_BUTTON';\r\n\r\nconst initialState = {\r\n    count: 4,\r\n    maxVal: 10,\r\n    minVal: 0,\r\n    minError: false,\r\n    setButtonDisabled: true,\r\n    newDisable: false,\r\n    disabledReduceMin: false,\r\n    disabledAddMin: false,\r\n    disabledReduceMax: false,\r\n    displayWhileSet: 'Yes please',\r\n    setVis: false,\r\n};\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_COUNTER:\r\n            return {\r\n                ...state,\r\n                count: state.count + 1\r\n            };\r\n        case RESET_COUNTER:\r\n            return {\r\n                ...state,\r\n                count: state.minVal\r\n            };\r\n        case SHOW_SET:\r\n            return {\r\n                ...state,\r\n                setVis: true\r\n            };\r\n        case DISABLE_SET_BUTTON:\r\n            return {\r\n                ...state,\r\n                setButtonDisabled: true,\r\n                count: state.minVal,\r\n                minError: false,\r\n                setVis: false\r\n            };\r\n        case SET_MAX_BUTTON:\r\n            let maxValue;\r\n            let disabledReduceMax;\r\n            let error;\r\n            if (action.id === 'addMax') {\r\n                maxValue = state.maxVal + 1;\r\n                disabledReduceMax = false;\r\n            } else if (action.id === 'reduceMax' && state.minVal === state.maxVal) {\r\n                maxValue = state.minVal;\r\n                disabledReduceMax = true;\r\n                error = true;\r\n            } else {\r\n                maxValue = state.maxVal - 1;\r\n            }\r\n            return {\r\n                ...state,\r\n\r\n                maxVal: maxValue,\r\n                disablesAddMin: false,\r\n                setButtonDisabled: false,\r\n                disabledReduceMax: disabledReduceMax,\r\n                minError: error\r\n            };\r\n        case SET_MIN_BUTTON:\r\n            let minValue;\r\n            if (action.id === 'addMin' && state.minVal < state.maxVal) {\r\n                minValue = state.minVal + 1;\r\n                return {\r\n                    ...state, minVal: minValue, count: minValue,\r\n                    disabledReduceMin: false, minError: false,\r\n                    setButtonDisabled: false,\r\n                };\r\n            } else if (state.minVal === state.maxVal) {\r\n                minValue = state.maxVal;\r\n                return {\r\n                    ...state, minVal: minValue, count: minValue,\r\n                    disabledAddMin: true, minError: true,\r\n                    setButtonDisabled: false,\r\n                };\r\n            }\r\n            if (action.id === 'reduceMin' && state.minVal > 0) {\r\n                minValue = state.minVal - 1;\r\n                return {\r\n                    ...state, minVal: minValue, count: minValue,\r\n                    disabledAddMin: false, minError: false,\r\n                    setButtonDisabled: false,\r\n                };\r\n            } else if (action.id === 'reduceMin' && state.minVal === 0) {\r\n                minValue = 0;\r\n                return {\r\n                    ...state, minVal: minValue, count: minValue,\r\n                    disabledReduceMin: true, disabledAddMin: false,\r\n                    minError: true, setButtonDisabled: false,\r\n                };\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\nexport const addCounterAC = () => ({type: ADD_COUNTER});\r\nexport const resetCounterAC = () => ({type: RESET_COUNTER});\r\nexport const showSetAC = () => ({type: SHOW_SET});\r\nexport const disableSetButtonAC = () => ({type: DISABLE_SET_BUTTON});\r\nexport const setMaxButtonAC = (id) => ({type: SET_MAX_BUTTON, id});\r\nexport const setMinButtonAC = (id) => ({type: SET_MIN_BUTTON, id});\r\n\r\n\r\nexport default reducer;","import React from 'react';\nimport './App.css';\nimport RC from \"./RC\";\nimport Display from \"./Display\";\nimport Setmin from \"./Setmin\";\nimport Setmax from \"./Setmax\";\nimport MainButton from \"./MainButton\";\nimport s from \"./MainButton.module.css\";\nimport {connect} from \"react-redux\";\nimport {\n    addCounterAC,\n    disableSetButtonAC,\n    maxValueAC,\n    resetCounterAC,\n    setMaxButtonAC,\n    setMinButtonAC,\n    showSetAC\n} from \"./redux/reducer\";\n\nclass App extends React.Component {\n\n    state = {\n        // count: 0,\n        // maxVal: 5,\n        // minVal: 0,\n        // minError: false,\n        // setButtonDisabled: true,\n        // newDisable: false,\n        // disabledReduceMin: false,\n        // disabledAddMin: false,\n        // disabledReduceMax: false,\n        // displayWhileSet: 'Yes please',\n        // setVis: false,\n    };\n\n\n    componentDidMount() {\n        this.restoreState();\n    };\n\n    saveState = () => {\n        let stateAsString = JSON.stringify(this.state);\n        localStorage.setItem('state', stateAsString);\n    };\n\n    restoreState = () => {\n        let stateAsString = localStorage.getItem('state');\n        if (stateAsString !== null) {\n            let stateAsObject = JSON.parse(stateAsString);\n            this.setState(stateAsObject);\n        }\n        this.setState({setButtonDisabled: true});\n    };\n\n    hardMinValue = (id) => {\n        // let minValue;\n        // let error;\n        // let currentMin = this.state.minVal;\n        // let currentMax = this.state.maxVal;\n        // if (id === 'addMin' && currentMin < currentMax) {\n        //     minValue = this.state.minVal + 1;\n        //     this.setState({disabledReduceMin: false, minError: false})\n        // } else if (this.state.minVal === this.state.maxVal) {\n        //     minValue = this.state.maxVal;\n        //     this.setState({disabledAddMin: true, minError: true});\n        // }\n        // if (id === 'reduceMin' && this.state.minVal > 0) {\n        //     minValue = this.state.minVal - 1;\n        //     this.setState({disabledAddMin: false, minError: false});\n        // } else if (id === 'reduceMin' && this.state.minVal === 0) {\n        //     minValue = 0;\n        //     this.setState({disabledReduceMin: true, disabledAddMin: false})\n        //     error = true;\n        //     this.setState({minError: error})\n        // }\n        // this.setState({minVal: minValue}, () => {\n        //     this.saveState()\n        // });\n        // this.setState({setButtonDisabled: false, count: minValue});\n    };\n    hardMaxValue = (id) => {\n        // let maxValue;\n        // let disabledReduceMax;\n        // let error;\n        // if (id === 'addMax') {\n        //     maxValue = this.state.maxVal + 1;\n        //     disabledReduceMax = false;\n        // } else if (id === 'reduceMax' && this.state.minVal === this.state.maxVal) {\n        //     maxValue = this.state.minVal;\n        //     disabledReduceMax = true;\n        //     error = true;\n        // } else {\n        //     maxValue = this.state.maxVal - 1;\n        // }\n        // this.setState({\n        //     maxVal: maxValue, disablesAddMin: false,\n        //     setButtonDisabled: false, disabledReduceMax: disabledReduceMax, minError: error\n        // }, () => {\n        //     this.saveState()\n        // });\n    };\n\n    countPlus = () => {\n    //     // let newCount = this.state.count;\n    //     // newCount += 1;\n    //     // this.setState({count: newCount}, () => {\n    //     //     this.saveState()\n    //     // });\n    //\n    //\n    };\n\n    countReset = () => {\n        // this.setState({count: this.state.minVal}, () => {\n        //     this.saveState()\n        // })\n    };\n\n    setClickDisabled = () => {\n        // let counterValue = this.state.minVal;\n        // this.setState({setButtonDisabled: true, count: counterValue,\n        //     minError: false, setVis: false});\n    };\n\n    showSettings = () => {\n        // this.setState({setVis: true})\n    };\n    \n    render = () => {\n        return (\n            <div className=\"counter\">\n                <div className={this.props.setVis ? 'counterProperties' : 'counterPropertiesHidden'}>\n                    <Setmin setmin={this.props.setMinButton}\n                            minVal={this.props.minVal}\n                            minError={this.props.minError}\n                            disabledReduceMin={this.props.disabledReduceMin}\n                            disabledAddMin={this.props.disabledAddMin}\n                    />\n                    <Setmax setmax={this.props.setMaxButton}\n                            maxval={this.props.maxVal}\n                            minError={this.props.minError}\n                    />\n                    <div>\n                        <MainButton title={'SET'}\n                                    classNameButton={s.mainButton}\n                                    onClick={this.props.disableSetButton}\n                                    disabled={this.props.setButtonDisabled}\n                        />\n                    </div>\n                </div>\n                <div className={this.props.setVis ? 'myCounterHidden' : 'myCounter'}>\n                    <Display count={this.props.count}\n                             maxVal={this.props.maxVal}\n                             displayWhileSet={this.props.displayWhileSet}\n                             disabledSetStatus={this.props.setButtonDisabled}\n                    />\n                    <RC countplus={this.props.addCounter}\n                        countreset={this.props.resetCounter}\n                        blockinc={this.props.count >= this.props.maxVal || !this.props.setButtonDisabled}\n                        blockres={this.props.count === this.props.minVal || !this.props.setButtonDisabled}\n                        showSettings={this.props.showSet}\n                    />\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        count: state.count,\n        maxVal: state.maxVal,\n        minVal: state.minVal,\n        minError: state.minError,\n        setButtonDisabled: state.setButtonDisabled,\n        newDisable: state.newDisable,\n        disabledReduceMin: state.disabledReduceMin,\n        disabledAddMin: state.disabledAddMin,\n        disabledReduceMax: state.disabledReduceMax,\n        displayWhileSet: state.displayWhileSet,\n        setVis: state.setVis,\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        addCounter: () => {\n            dispatch(addCounterAC());\n        },\n        resetCounter: () => {\n            dispatch(resetCounterAC());\n        },\n        showSet: () => {\n            dispatch(showSetAC());\n        },\n        disableSetButton: () => {\n            debugger\n            dispatch(disableSetButtonAC());\n        },\n        setMaxButton: (id) => {\n            dispatch(setMaxButtonAC(id));\n        },\n        setMinButton: (id) => {\n            dispatch(setMinButtonAC(id));\n        },\n\n\n    }\n};\n\nconst ConnectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\nexport default ConnectedApp;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\n\r\n\r\nconst store = createStore(reducer);\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n   , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2lcvY\",\"redDisplay\":\"Display_redDisplay__69LGw\"};"],"sourceRoot":""}